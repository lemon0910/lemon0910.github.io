---
layout:     post
title:      深入理解raft协议
date:       2017-01-10 22:26:00
author:     "lemon"
categories: 系统
---

raft解决了什么？raft解决了分布式系统中多机对同一个值达成一致。深入理解raft，就会发现raft是paxos的简化版。raft是强leader，这就避免了分布式系统中的脑裂问题，即只有一个节点有话语权，这就不会造成多个节点提议不同的值产生分析。raft通过commit日志保存达成一致的值，从而保证整个集群按照固定的日志顺序执行下去。通过raft协议，实现了在非拜占庭故障下永久安全存储（前提：集群大于多数派的节点不宕机）。从这可以看出，raft的存储容量为单机的存储容量，实现raft的集群最多保存单机容量的数据，所以往往用来存储关键元数据。raft为什么必须需要保证多数派？主要是为了实现高可用（服务不能停）和高可靠（数据不丢失）。最近看tidb介绍使用raft集群保证数据副本的一致性和高性能，这也是使用raft的一种思路。

## leader

leader主要包括leader选举和进行日志复制两个流程。leader就意味着可用性，选举leader要保证数据可靠性、公平性和服务可用性。可靠性保证以前提交的日志一定是可靠地，不能让新的leader弄丢。公平性通过随机时间大小保证每一个节点都有成为leader的可能，当然要在保证安全性的前提下。服务可用性有两个要求：尽快选出leader，尽量减少leader的选举。leader一个核心的概念是term，term意味着一次任期，term值的大小影响着选举的成功。通过一些手段保证leader如果正常，不被新的选举影响，如通过pre-vote防止随便发起选举。

## 日志复制

日志只能有从leader发往follower，简单意味着不容易出问题。日志复制最重要的一个概念是commit，commit意味着数据可靠了，如转账成功。leader通过收到多数派的响应确认数据commit，follower通过leader的下一次AppendEntries确定提交位置。注意，旧term得到多数派响应不意味着日志commit。必须当前term提交一个新的日志项才能保证前面旧term的成功。

## 成员变更

论文中的过渡态没讲太清楚，论文中有新的算法，一个一个添加和删除节点实现配置变更，需要进一步熟悉，后续进行补充。
